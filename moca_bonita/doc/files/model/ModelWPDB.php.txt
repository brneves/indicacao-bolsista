<?php

/**
* Base model for new created models based on the wordpress $wpdb object that treats connections with database.
*
* @author Rômulo Batista
* @category WordPress
* @package moca_bonita\wp
* @copyright Copyright (c) 2015-2016 Núcleo de Tecnologia da Informação - NTI, Universidade Estadual do Maranhão - UEMA
*/

abstract class ModelWPDB {
	/**
    * Object of a wordpress database class
    * 
    * @var string
    */
	protected $wpdb;
	
	/**
    * The name of the table to be used
    * 
    * @var string
    */
	protected $table;

	/**
    * Class constructor
    * 
    */
	public function __construct(){
		global $wpdb;
		$this->wpdb = $wpdb;
	}

	/**
    * Retrieve generic results from database
    *
    * @param string $query The SQL query 
    * @return An object or a array (associative or not)
    */
	public function getResults($query){
		try {
			return $this->wpdb->get_results($query);
		} catch(Exception $e){
			throw new Exception( $e->getMessage());
		}
	}

	/**
    * Returns a single variable from the database
    *
    * @param string $query The SQL query 
    * @return An object or a array (associative or not)
    */
	public function getVar($query){
		try {
			return $this->wpdb->get_var($query);
		} catch(Exception $e){
			throw new Exception($e->getMessage());
		}
	}

	/**
    * Retrieve generic results from database
    *
    * @param string $query The SQL query 
    * @param string One of four pre-defined constants
    * @return An object or a array (associative or not)
    */
	public function getResultsT($query, $outputType = OBJECT){

		try {
			return $this->wpdb->get_results($query, $outputType);
		}
		catch(Exception $e){
			throw new Exception( $e->getMessage());
		}
			
	}

	/**
    * Retrieve an entire row from a query
    *
    * @param string $query The SQL query 
    * @param string $query One of three pre-defined constants
    * @param rowOffSet $rowOffSet The desired row
    * @return An object or a array (associative or not)
    */
	public function getRow($query, $outputType = OBJECT, $rowOffSet = 0){
		try {
		 return $this->wpdb->get_row($query, $outputType, $rowOffSet);
		}
		catch(Exception $e){
			throw new Exception( $e->getMessage());
		}

	}

	/**
    * Retrieve an entire columns from a query
    *
    * @param string $query The SQL query 
    * @param string $colOffSet What information you wish to retrieve
    * @return An object or a array (associative or not)
    */
	public function getColumn($query, $colOffSet = 0){
		try{
			return $this->wpdb->get_column($query, $colOffSet);
		} catch(Exception $e){
			throw new Exception( $e->getMessage());
		}
	}

	/**
    * Insert a row in a table
    *
    * @param string $query The SQL query 
    * @param array $data Data to insert
    * @param array|string $format An array of formats to be mapped to each of the values in data
    * @return The generated ID
    */
	public function insert($table, $data, $format){
		try{
			$this->wpdb->insert($table, $data, $format);
			return $this->wpdb->insert_id;
		} catch(Exception $e){
			throw new Exception( $e->getMessage());
		}
	}

	/**
    * Replace a row in a table if it exists or insert a new row in a table if the row did not already exist
    *
    * @param string $table The name of the table to replace data in
    * @param array $data Data to replace
    * @param array $where A named array of WHERE clauses
    * @param array|string $format An array of formats to be mapped to each of the values in data
    * @param array|string $whereFormat An array of formats to be mapped to each of the values in $where
    * @return The generated ID
    */
	public function replace($table, $data, $where, $format = null, $whereFormat = null){
		try{
		 return $this->wpdb->update($table, $data, $where, $format, $whereFormat);
		} catch(Exception $e){
			throw new Exception( $e->getMessage());
		}
	}

	/**
    * Delete row
    *
    * @param string $table The name of the table to replace data in
    * @param array $where A named array of WHERE clauses
    * @param array $whereFormat An array of formats to be mapped to each of the values in $where
    * @return The generated ID
    */
	public function remove($table, $where, $whereFormat = null){
		try{
			return $this->wpdb->delete($table, $where, $whereFormat);
		} catch(Exception $e){
			throw new Exception( $e->getMessage());
		}
	}

	/**
    * Returns the result of a query
    *
    * @param string $table The name of the table to replace data in
    * @return An integer value indicating the number of rows affected/selected for SELECT, INSERT, DELETE, UPDATE, etc. For CREATE, ALTER, TRUNCATE and DROP SQL statementsreturns TRUE on success or FALSE when error
    */
	public function query($query){
		try{
			$this->wpdb->query($query);
		} catch(Exception $e){
			throw new Exception( $e->getMessage());
		}
	}

	/**
    * Begin a transaction
    *
    */
	public function beginTransaction(){
		return $this->wpdb->query("START TRANSACTION;");
	}

	/**
    * Commit a transaction
    *
    */
	public function commit(){
		return $this->wpdb->query("COMMIT;");
	}

	/**
    * Rollback if a transaction goes wrong
    *
    */
	public function rollBack(){
		return $this->wpdb->query("ROLLBACK;");
	}

}
