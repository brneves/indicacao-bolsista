<?php

/**
* Insert and remove wordpress admin menus.
*
* @author Rômulo Batista
* @category WordPress
* @package moca_bonita\wp
* @copyright Copyright (c) 2015-2016 Núcleo de Tecnologia da Informação - NTI, Universidade Estadual do Maranhão - UEMA
*/

class WPMenu {
	/**
    * Array with the menu itens
    * 
    * @var array
    */
	private $wpMenuItems;
	/**
    * Array with the submenu itens
    * 
    * @var array
    */
	private $wpMenuSubItems;

	/**
    * Class constructor
    * 
    */
	public function __construct(){
		$this->wpMenuItems = array();
		$this->wpMenuSubItems = array();
	}

	/**
    * Set menu items
    * 
    * @param array $wpMenuItems An array with items
    */
	public function setMenuItems($wpMenuItems){
		if(is_array($wpMenuItems))
			$this->wpMenuItems = $wpMenuItems;
		else
			throw new Exception('The variable is not an array.', 1);			
	}

	/**
    * Get menu items
    * 
    * @return The menu items
    */
	public function getMenuItems(){
		if($this->wpMenuItems)
			return $this->wpMenuItems;

		return null;
	}

	/**
    * Unset menu items from memory
    * 
    */
	public function freeMenuItems(){
		unset($this->wpMenuItems);
	}

	/**
    * Set menu sub items
    * 
    * @param array $wpMenuSubItems An array with items
    */
	public function setMenuSubItems($wpMenuSubItems){
		if(is_array($wpMenuSubItems))
			$this->wpMenuSubItems = $wpMenuSubItems;
		else
			throw new Exception('The variable is not an array.', 1);
	}

	/**
    * Get menu subitems
    * 
    * @return The menu subitems
    */
	public function getMenuSubItems(){
		if($this->wpMenuSubItems)
			return $this->wpMenuSubItems;

		return null;
	}

	/**
    * Unset menu subitems from memory
    * 
    */
	public function freeSubMenuItems(){
		unset($this->wpSubMenuItems);
	}

	/**
    * Add a set of menus to wp admin page
    * 
    */
	public function addMenu(){
		for($i=0; $i<sizeof($this->wpMenuItems); $i++){
			$this->addWPMenu($this->wpMenuItems[$i][0], 
				$this->wpMenuItems[$i][1], $this->wpMenuItems[$i][2], 
				$this->wpMenuItems[$i][3], $this->wpMenuItems[$i][4], 
				$this->wpMenuItems[$i][5], $this->wpMenuItems[$i][6]);	
		}
	}

	/**
    * Add a set of submenus from a menu to wp admin page
    * 
    */
	public function addSubMenu(){
		for($i=0; $i<sizeof($this->wpMenuSubItems); $i++){
			$this->addWPSubMenu($this->wpMenuSubItems[$i][0], 
				$this->wpMenuSubItems[$i][1], $this->wpMenuSubItems[$i][2], 
				$this->wpMenuSubItems[$i][3], $this->wpMenuSubItems[$i][4], 
				$this->wpMenuSubItems[$i][5], $this->wpMenuSubItems[$i][6]);	
		}
	}

	/**
    * Add menu to wp admin page
    * 
    * @param string $pageTitle The text to be displayed in the title tags of the page when the menu is selected
    * @param string $menuTitle The on-screen name text for the menu
    * @param string $capability The capability required for this menu to be displayed to the user
    * @param string $menuSlug The slug name to refer to this menu by (should be unique for this menu)
    * @param object $object The objected that will treat the request
    * @param string $method The callback method
    * @param string $iconUrl The icon for this menu
    * @param string $position The position in the menu order this menu should appear
    */
	public function addWPMenu($pageTitle, $menuTitle, $capability, 
									$menuSlug, $object, $method, $iconUrl='', $position=100){
		add_menu_page($pageTitle, $menuTitle, $capability, 
			$menuSlug, array($object, $method), $iconUrl, $position);
	}

	/**
    * Add submenus from amenu to wp admin page
    * 
    * @param string $parentSlug The slug name for the parent menu
    * @param string $pageTitle The text to be displayed in the title tags of the page when the menu is selected 
    * @param string $menuTitle The text to be used for the menu 
    * @param string $capability The capability required for this menu to be displayed to the user
    * @param string $menuSlug The slug name to refer to this menu by
    * @param object $object The objected that will treat the request
    * @param string $method The callback method
    */
	public function addWPSubMenu($parentSlug, $pageTitle, $menuTitle, 
									$capability, $menuSlug, $object, $method){
		add_submenu_page($parentSlug, $pageTitle, $menuTitle, 
			$capability, $menuSlug, array($object, $method));
	}

}
